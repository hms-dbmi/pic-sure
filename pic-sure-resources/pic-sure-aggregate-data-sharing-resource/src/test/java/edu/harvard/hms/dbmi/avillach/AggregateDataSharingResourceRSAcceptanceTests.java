package edu.harvard.hms.dbmi.avillach;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.junit.WireMockClassRule;

import edu.harvard.dbmi.avillach.domain.QueryRequest;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.ws.rs.core.Response;

import org.apache.commons.codec.Charsets;
import org.apache.commons.io.IOUtils;

/*
 * Note: All json is in /src/main/resources, see the convenience methods at the bottom of the class.
 * 
 *
 */
public class AggregateDataSharingResourceRSAcceptanceTests {

	private ObjectMapper mapper = new ObjectMapper();

	private Pattern obfuscatedResultPattern = Pattern.compile("(\\d+) \\u00B13");

	private ApplicationProperties mockProperties;

	private AggregateDataSharingResourceRS objectUnderTest;

	// Pick a random port between 20k and 52k 
	private final static int port = (int) ((Math.random()*32000)+20000);
	private final static String testURL = "http://localhost:"+port+"/";

	@Rule
	public WireMockClassRule wireMockRule = new WireMockClassRule(port);

	@Before
	public void setup() throws IOException {
		mockProperties = mock(ApplicationProperties.class);
		when(mockProperties.getTargetResourceId()).thenReturn("f0317fa9-0945-4390-993a-840416e97d13");
		when(mockProperties.getTargetPicsureObfuscationThreshold()).thenReturn(10);
		when(mockProperties.getTargetPicsureObfuscationVariance()).thenReturn(3);
		when(mockProperties.getTargetPicsureObfuscationSalt()).thenReturn("abc123");
		when(mockProperties.getTargetPicsureUrl()).thenReturn(testURL);
		when(mockProperties.getTargetPicsureToken()).thenReturn("This actually is not needed here, only for the proxy resource.");
		objectUnderTest = new AggregateDataSharingResourceRS(mockProperties);

		// Whenever the ADSRRS submits a search for "any" we return the contents of open_access_search_result.json
		wireMockRule.stubFor(post(urlEqualTo("/search"))
				.withRequestBody(equalToJson("{\"query\":\"any\"}"))
				.willReturn(aResponse()
						.withStatus(200)
						.withBody(getTestJson("open_access_search_result"))));

	}

	/**
	 * This is just a test to make sure equalToJson(...).match(...).isExactMatch() handles reordered JSON
	 * @throws IOException
	 * @throws JsonProcessingException
	 * @throws JsonMappingException
	 */
	@Test
	public void testTest() throws JsonMappingException, JsonProcessingException, IOException {
		assertTrue(equalToJson("{\"a\":100,\"b\":\"foo\"}").match("{\"b\":\"foo\",\"a\":100}").isExactMatch());
	}

	@Test
	public void testNoObfuscationOnLargeCounts() throws IOException {
		expect_original_result_to_become_obfuscated_result("large_open_access_cross_count_result", "large_open_access_cross_count_result");
	}

	@Test
	public void testZeroNotObfuscated() throws IOException {
		expect_original_result_to_become_obfuscated_result("all_zero_open_access_cross_count_result", "all_zero_open_access_cross_count_result");
	}

	@Test
	public void testTenNotObfuscated() throws IOException {
		expect_original_result_to_become_obfuscated_result("all_ten_open_access_cross_count_result", "all_ten_open_access_cross_count_result");
	}

	@Test
	public void testOneThroughNineObfuscated() throws IOException {
		expect_original_result_to_become_obfuscated_result("all_less_ten_open_access_cross_count_result", "obfuscated_all_less_ten_open_access_cross_count_result");
	}

	@Test
	public void testSingleObfuscationPropagated() throws IOException {
		String obfuscated = getObfuscatedResponseForResult("one_obfuscated_open_access_cross_count_result");
		Map result = mapper.readValue(obfuscated, Map.class);

		// The parts of the result which don't need obfuscation should be unmodified
		String allC2Result = (String) result.remove("\\all\\c\\2\\");
		String allCResult = (String) result.remove("\\all\\c\\");
		String allResult = (String) result.remove("\\all\\");
		String value = mapper.writeValueAsString(result);
		String shouldBe = getTestJson("one_obfuscated_open_access_cross_count_result_without_obfuscated_elements");
		assertTrue(
				equalToJson(value)
						.match(shouldBe)
						.isExactMatch());

		// \\all\\c\\2\\ should be "< 10"
		assertEquals(allC2Result, "< 10");

		// \\all\\c\\ should be some number between 60 and 66 with +-3 appended
		assertTrue(obfuscatedResultPattern.matcher(allCResult).matches());
		int allCNumericResult = getObfuscatedNumericResult(allCResult);
		assertEquals(allCNumericResult, 63);

		// \\all\\ should be some number between 300 and 336 with +-3 appended
		assertTrue(obfuscatedResultPattern.matcher(allResult).matches());
		int allNumericResult = getObfuscatedNumericResult(allResult);
		assertEquals(allNumericResult, 333);
	}

	@Test
	public void testMultipleObfuscationPropagated() throws IOException {
		String obfuscated = getObfuscatedResponseForResult("two_obfuscated_open_access_cross_count_result");
		Map result = mapper.readValue(obfuscated, Map.class);

		// The parts of the result which don't need obfuscation should be unmodified
		String allC2Result = (String) result.remove("\\all\\c\\2\\");
		String allCResult = (String) result.remove("\\all\\c\\");
		String allD2Result = (String) result.remove("\\all\\d\\2\\");
		String allD3Result = (String) result.remove("\\all\\d\\3\\");
		String allDResult = (String) result.remove("\\all\\d\\");
		String allResult = (String) result.remove("\\all\\");
		String value = mapper.writeValueAsString(result);
		String shouldBe = getTestJson("two_obfuscated_open_access_cross_count_result_without_obfuscated_elements");
		assertTrue(
				equalToJson(value)
						.match(shouldBe)
						.isExactMatch());

		// \\all\\c\\2\\, \\all\\d\\2\\, \\all\\d\\3\\ should be "< 10"
		assertEquals(allC2Result, "< 10");
		assertEquals(allD2Result, "< 10");
		assertEquals(allD3Result, "< 10");

		// \\all\\c\\ should be some number between 60 and 66 with +-3 appended
		assertTrue(obfuscatedResultPattern.matcher(allCResult).matches());
		int allCNumericResult = getObfuscatedNumericResult(allCResult);
		assertTrue(allCNumericResult > 59 && allCNumericResult < 67);

		// \\all\\d\\ should be some number between 52 and 58 with +-3 appended
		assertTrue(obfuscatedResultPattern.matcher(allCResult).matches());
		int allDNumericResult = getObfuscatedNumericResult(allDResult);
		assertTrue(allDNumericResult > 51 && allDNumericResult < 59);

		// \\all\\ should be some number between 300 and 336 with +-3 appended
		assertTrue(obfuscatedResultPattern.matcher(allResult).matches());
		int allNumericResult = getObfuscatedNumericResult(allResult);
		assertTrue(allNumericResult > 329 && allNumericResult < 337);
	}

	@Test
	public void testMiddleLessTenObfuscationPropagated() throws IOException {
		String obfuscated = getObfuscatedResponseForResult("middle_less_ten_obfuscated_open_access_cross_count_result");
		Map result = mapper.readValue(obfuscated, Map.class);

		// The parts of the result which don't need obfuscation should be unmodified
		String allC2Result = (String) result.remove("\\all\\c\\2\\");
		String allCResult = (String) result.remove("\\all\\c\\");
		String allD2Result = (String) result.remove("\\all\\d\\2\\");
		String allD3Result = (String) result.remove("\\all\\d\\3\\");
		String allDResult = (String) result.remove("\\all\\d\\");
		String allB1Result = (String) result.remove("\\all\\b\\1\\");
		String allB2Result = (String) result.remove("\\all\\b\\2\\");
		String allBResult = (String) result.remove("\\all\\b\\");
		String allResult = (String) result.remove("\\all\\");
		String resultString = mapper.writeValueAsString(result);
		String shouldBe = getTestJson("middle_less_ten_obfuscated_open_access_cross_count_result_without_obfuscated_element");
		assertTrue(
				equalToJson(resultString)
						.match(shouldBe)
						.isExactMatch());

		// \\all\\b\\1\\, \\all\\b\\2\\, \\all\\b\\, \\all\\c\\2\\, \\all\\d\\2\\, \\all\\d\\3\\ should be "< 10"
		assertEquals(allBResult, "< 10");
		assertEquals(allB1Result, "< 10");
		assertEquals(allB2Result, "< 10");
		assertEquals(allC2Result, "< 10");
		assertEquals(allD2Result, "< 10");
		assertEquals(allD3Result, "< 10");

		// \\all\\c\\ should be some number between 60 and 66 with +-3 appended
		assertTrue(obfuscatedResultPattern.matcher(allCResult).matches());
		int allCNumericResult = getObfuscatedNumericResult(allCResult);
		assertTrue(allCNumericResult > 59 && allCNumericResult < 67);

		// \\all\\d\\ should be some number between 52 and 58 with +-3 appended
		assertTrue(obfuscatedResultPattern.matcher(allCResult).matches());
		int allDNumericResult = getObfuscatedNumericResult(allDResult);
		assertTrue(allDNumericResult > 51 && allDNumericResult < 59);

		// \\all\\ should be some number between 300 and 336 with +-3 appended
		assertTrue(obfuscatedResultPattern.matcher(allResult).matches());
		int allNumericResult = getObfuscatedNumericResult(allResult);
		assertTrue(allNumericResult > 329 && allNumericResult < 337);
	}

	@Test
	public void testObfuscationDoesntChangeWithoutChangeInQuery() throws IOException {
		String obfuscated_1 = getObfuscatedResponseForResult("one_obfuscated_open_access_cross_count_result");
		String obfuscated_2 = getObfuscatedResponseForResult("one_obfuscated_open_access_cross_count_result");
		assertTrue(
				equalToJson(obfuscated_1)
						.match(obfuscated_2)
						.isExactMatch());
	}


	@Test
	public void testSingleObfuscationPropagatedUnsortedResponse() throws IOException {
		String obfuscated = getObfuscatedResponseForResult("one_obfuscated_open_access_cross_count_result_unsorted");
		Map result = mapper.readValue(obfuscated, Map.class);

		// The parts of the result which don't need obfuscation should be unmodified
		String allC2Result = (String) result.remove("\\all\\c\\2\\");
		String allCResult = (String) result.remove("\\all\\c\\");
		String allResult = (String) result.remove("\\all\\");
		String value = mapper.writeValueAsString(result);
		String shouldBe = getTestJson("one_obfuscated_open_access_cross_count_result_without_obfuscated_elements");
		assertTrue(
				equalToJson(value)
						.match(shouldBe)
						.isExactMatch());

		// \\all\\c\\2\\ should be "< 10"
		assertEquals(allC2Result, "< 10");

		// \\all\\c\\ should be some number between 60 and 66 with +-3 appended
		assertTrue(obfuscatedResultPattern.matcher(allCResult).matches());
		int allCNumericResult = getObfuscatedNumericResult(allCResult);
		assertEquals(allCNumericResult, 63);

		// \\all\\ should be some number between 300 and 336 with +-3 appended
		assertTrue(obfuscatedResultPattern.matcher(allResult).matches());
		int allNumericResult = getObfuscatedNumericResult(allResult);
		assertEquals(allNumericResult, 333);
	}

	@Test
	public void testMinimumThreshold() throws IOException {
		String obfuscated = getObfuscatedResponseForResult("test_minimum_threshold");
		Map result = mapper.readValue(obfuscated, Map.class);

		String allDResult = (String) result.remove("\\all\\d\\");
		int numericResult = getObfuscatedNumericResult(allDResult);
		assertTrue(numericResult >= 10);
	}

	@Test
	public void testProcessContinuousCrossCounts() throws IOException {
		assertNull(objectUnderTest.processContinuousCrossCounts(null, null));
	}

	@Test
	public void testProcessCategoricalCrossCounts() throws JsonProcessingException {
		assertNull(objectUnderTest.processCategoricalCrossCounts(null, null));
	}

	private QueryRequest getTestQuery() throws JsonProcessingException, JsonMappingException, IOException {
		return mapper.readValue(getTestJson("test_cross_count_query"), QueryRequest.class);
	}

	private String getObfuscatedTestQueryJson() throws JsonProcessingException, JsonMappingException, IOException {
		return getTestJson("obfuscated_cross_count_query");
	}

	private String getObfuscatedTestQueryJson2() throws JsonProcessingException, JsonMappingException, IOException {
		return getTestJson("obfuscated_cross_count_query2");
	}

	private String getTestJson(String json_file_name) throws IOException {
		return IOUtils.toString(this.getClass().getClassLoader().getResourceAsStream(json_file_name + ".json"), Charsets.UTF_8);
	}

	private int getObfuscatedNumericResult(String allC2Result) {
		Matcher matcher = obfuscatedResultPattern.matcher(allC2Result);
		matcher.find();
		return Integer.parseInt(matcher.group(1));
	}

	private void expect_original_result_to_become_obfuscated_result(String originalResult, String obfuscatedResult)
			throws JsonProcessingException, JsonMappingException, IOException {
		String responseJson = getObfuscatedResponseForResult(originalResult);
		assertTrue(
				equalToJson(responseJson)
						.match(getTestJson(obfuscatedResult))
						.isExactMatch());
	}

	private String getObfuscatedResponseForResult(String originalResult)
			throws JsonProcessingException, JsonMappingException, IOException {
		wireMockRule.stubFor(post(urlEqualTo("/query/sync"))
				.withRequestBody(equalToJson(mapper.writeValueAsString(getTestQuery())))
				.withHeader("Authorization", equalTo("Bearer This actually is not needed here, only for the proxy resource."))
				.willReturn(aResponse()
						.withStatus(200)
						.withBody(getTestJson(originalResult))));

		Response response = objectUnderTest.querySync(getTestQuery());
		// TODO: This is what should be sent
//		Response response = objectUnderTest.querySync(mapper.readValue(getObfuscatedTestQueryJson(), QueryRequest.class));

		String responseJson = (String) response.getEntity();
		return responseJson;
	}

//	'{"\\phs000209\\pht001121\\phv00087080\\bmifc\\":{"20.0878369493754":1,"20.1767838944327":1,"20.2018091986461":1,"20.3660041629059":1,"20.4840971940908":1,"20.5010330578512":1,"20.5261728893561":1,"20.5542312698053":1,"20.6014928649997":1,"20.7186281161329":1,"20.722998142118":1,"20.7371498694742":1,"20.7608393727431":1,"20.7731105579377":1,"20.7965397923875":1,"20.8177722092379":1,"20.8223148693113":1,"20.8483529499957":1,"20.8602671688626":1,"20.9702653421506":2,"20.9745817016732":1,"20.9912536443149":1,"20.9997682144789":1,"21.025678866588":1,"21.1005908453123":1,"21.1186540731995":1,"21.1734981017293":1,"21.1749129862985":1,"21.1990030372037":1,"21.2301205210993":1,"21.2577632158052":1,"21.2592627940745":1,"21.3018773755135":1,"21.3508077058665":1,"21.4549238482641":1,"21.480922058246":1,"21.5307720394336":1,"21.5952142473921":1,"21.6343327454439":1,"21.6500612712451":1,"21.6944350635719":1,"21.7024221453287":1,"21.7741541058855":1,"21.798020679384":1,"21.8564115567007":1,"21.9944707497737":1,"22.0063322940555":1,"22.0235612932365":1,"22.0531906559704":1,"22.1366459627329":1,"22.2216496173568":1,"22.2526016967445":1,"22.2942507922137":1,"22.3084628224905":1,"22.3101863510451":1,"22.3378425251474":1,"22.4009548019096":1,"22.4139904319363":1,"22.4213920988981":1,"22.43588686713":1,"22.4465479136032":1,"22.4525238990956":1,"22.4562243864149":1,"22.4577777562696":1,"22.4729223398374":1,"22.4832367664354":1,"22.502511441009":1,"22.5081113511551":1,"22.5264288670324":1,"22.5397853437999":1,"22.5752438139396":1,"22.6170655567118":1,"22.618638917794":1,"22.6187473921197":1,"22.646449704142":1,"22.6481994459834":1,"22.6836648526928":1,"22.7158261028823":1,"22.7306680189688":1,"22.7544482787644":1,"22.7581212832554":1,"22.7774084633477":1,"22.8096":1,"22.8106300355164":1,"22.8311878871185":1,"22.8464094674556":1,"22.8476721119906":1,"22.8491433413241":1,"22.8561606424581":1,"22.8709835347471":1,"22.8967565083352":1,"22.9071626967427":1,"22.9072315558802":1,"22.9090154512008":1,"22.9182203751672":1,"22.9196906603212":1,"22.9294701120164":1,"22.9332046840051":1,"22.9668600543343":1,"23.0160604403926":1,"23.0206979276141":1,"23.0295138888889":1,"23.0332292893554":1,"23.034375":1,"23.058858072155":1,"23.1058285714286":1,"23.1062643650056":1,"23.1101299858993":1,"23.137282956219":1,"23.1558101602641":1,"23.1706616257089":1,"23.1740029346299":1,"23.174153914215":1,"23.1963135533228":1,"23.2329560887279":1,"23.2331931346729":1,"23.2376422626125":1,"23.2432526858241":1,"23.2459847844463":1,"23.2879900776117":1,"23.2880372023345":1,"23.2957146993953":1,"23.2974328760205":1,"23.3022491931719":1,"23.30460203214":1,"23.3273865088757":1,"23.3393362490352":1,"23.3419902702123":1,"23.4053211502284":1,"23.4172253460208":1,"23.4471877282688":1,"23.448240211275":1,"23.4544139018047":1,"23.4593715365657":1,"23.5161051834138":1,"23.5278092625527":1,"23.5401542070532":1,"23.5636924287319":1,"23.5729938432641":1,"23.5885714285714":1,"23.6139346838041":1,"23.6596910049097":1,"23.6618756503642":1,"23.6755185625578":1,"23.685417687681":1,"23.7111714890132":1,"23.7246595007178":1,"23.7412713545827":1,"23.7715084286837":1,"23.7896878719238":1,"23.8053336727875":1,"23.825845649849":1,"23.8356235336707":1,"23.8382310200539":1,"23.8771720176777":1,"23.9064888737897":1,"23.9176913831361":1,"23.9230800438152":1,"23.9250959707874":1,"23.932854442344":1,"23.9352308694181":1,"23.9356401384083":1,"23.9462728457349":1,"23.9513210533818":1,"23.9591392669983":1,"23.9895855473718":1,"24.0234642690716":1,"24.0543789565006":1,"24.0699969062473":1,"24.0759587426903":1,"24.0763939504373":1,"24.0887138429752":1,"24.1002175072844":1,"24.1232772211768":1,"24.1331094899423":1,"24.1797828465617":1,"24.1871538531379":1,"24.187200952192":1,"24.1899910108327":1,"24.1948051948052":1,"24.1995343312082":1,"24.2050739889573":1,"24.2206295857988":1,"24.2255273120606":1,"24.2429899506944":1,"24.3054273986101":1,"24.311854752581":1,"24.3171421900611":1,"24.3515192004854":1,"24.3624133658311":1,"24.3735826379639":1,"24.3737384193365":1,"24.3954311327267":1,"24.4226418378002":1,"24.4248512709573":1,"24.4326343004884":1,"24.4524630972137":1,"24.4620533027309":1,"24.4654837842948":1,"24.471360295313":1,"24.4730769230769":1,"24.4817001180638":1,"24.4849826989619":1,"24.5066722164412":1,"24.5083635806638":1,"24.5214414328228":1,"24.5242265991626":1,"24.5676051003661":1,"24.5729705991124":1,"24.5785392708392":1,"24.6019351473447":1,"24.6025320648301":1,"24.6078961600865":1,"24.6296499334325":1,"24.6388345473465":1,"24.6409517741541":2,"24.6448816473386":1,"24.6518545481432":1,"24.6579136195978":1,"24.6638396817467":1,"24.6736187163524":1,"24.6774339988096":1,"24.6915372332704":1,"24.7220050916132":1,"24.7516388978737":1,"24.7525435830309":1,"24.7633786324359":1,"24.783718713456":1,"24.7853084951777":1,"24.7966656978225":1,"24.7978090648858":1,"24.80625":2,"24.8160266587785":1,"24.8181000721341":1,"24.8327231410176":1,"24.8497275094633":1,"24.8520710059172":1,"24.8576419600013":1,"24.8685714285714":1,"24.8854156847959":1,"24.8911334999613":1,"24.9167503712115":1,"24.9401735360189":1,"24.9462331128269":1,"24.965675893577":1,"24.976370510397":1,"25.0062480174748":1,"25.0139210857908":1,"25.0389782144628":1,"25.0479747199081":1,"25.0494192122787":1,"25.0636945920744":1,"25.0690269582471":1,"25.0852514300474":1,"25.096616357409":1,"25.0987158121753":1,"25.1046763989271":1,"25.1088072766394":1,"25.1108428720083":1,"25.1187115985877":1,"25.1552384727177":1,"25.1656785771511":1,"25.2038443733692":1,"25.2099898665054":1,"25.2274660808184":1,"25.2330989724175":1,"25.2518963605351":1,"25.2769340900155":1,"25.2803835943113":1,"25.2823929553844":1,"25.2858415582147":1,"25.2872819759928":1,"25.2974419988102":1,"25.3294616930981":1,"25.3423197826203":1,"25.3514128591189":1,"25.3606076621124":1,"25.3684227456359":1,"25.375829135109":1,"25.3932138181675":1,"25.3961709912649":1,"25.4012760005075":1,"25.4190617902733":1,"25.4276851939768":1,"25.4284020711177":1,"25.4337935568705":1,"25.4400702671051":1,"25.4468909753082":1,"25.4485207100592":1,"25.4600947521866":1,"25.4636976790319":1,"25.4693080186807":1,"25.47112598549":1,"25.4756571428571":1,"25.5027965860679":1,"25.5035120340882":1,"25.5247632219324":1,"25.5248162930707":1,"25.5297901425286":1,"25.535228943311":1,"25.5411556435372":1,"25.5467392964704":1,"25.5558894230769":1,"25.5566712062852":1,"25.5609818379138":1,"25.5678177287291":1,"25.5696929379223":1,"25.6004834754824":1,"25.6024823834262":1,"25.6087922014378":1,"25.6092539947064":1,"25.6133546233125":1,"25.6179595081588":2,"25.6220856830233":2,"25.6303205228993":1,"25.6361474435196":1,"25.6503559002841":1,"25.6623582806987":1,"25.6689880523179":1,"25.6703301806024":1,"25.6716119935615":1,"25.6978737136505":1,"25.6980899680746":1,"25.7028508218147":1,"25.7092465906931":1,"25.7101654954563":1,"25.7112552681015":1,"25.7257231404959":1,"25.7272659035466":1,"25.7287848318269":1,"25.7349436963004":1,"25.7440694817907":1,"25.7459086179169":2,"25.7564378086696":1,"25.7695880494111":1,"25.7718857142857":1,"25.7917683696659":1,"25.7981969082721":1,"25.8079198907601":1,"25.8487338264704":1,"25.8535195212311":1,"25.8620296447886":1,"25.8772773750137":1,"25.8813588951693":1,"25.8820105468187":1,"25.8893774201349":1,"25.8959338863268":1,"25.9043092085592":1,"25.9053870529651":1,"25.9082921216679":1,"25.9092044981258":1,"25.9108376030296":1,"25.9121146565711":1,"25.9162706154482":1,"25.9184780873951":1,"25.9422713193169":1,"25.9556041254013":1,"25.95796875":1,"25.9613686462019":1,"25.9642022103665":1,"25.9650466195216":1,"25.9674421045434":1,"25.9864974345126":1,"25.9909316341516":1,"26.0002189294351":1,"26.0059123891427":1,"26.0278935866392":1,"26.0282487635247":1,"26.0318196558603":2,"26.0446294369291":1,"26.0545328719723":1,"26.0654407787994":1,"26.0689655172414":1,"26.0747897368738":1,"26.0796740606609":1,"26.0814141242458":1,"26.0832648230865":1,"26.0879016174289":1,"26.0979632541905":2,"26.1134032193857":1,"26.1249403021584":1,"26.1440922190202":1,"26.1586178442768":1,"26.1591346692339":1,"26.1658071759111":1,"26.1666852735485":1,"26.1714364930343":1,"26.1913833815995":1,"26.1922897770266":1,"26.1939442840156":1,"26.1985932420074":1,"26.2177157823006":1,"26.247604260355":1,"26.263261746118":1,"26.263501371293":1,"26.264682264753":1,"26.2716049382716":1,"26.2791643106569":1,"26.2907799078863":1,"26.2949317648236":1,"26.3014938886374":1,"26.3032578641195":1,"26.3041846500282":2,"26.3059362700128":1,"26.3240355627429":1,"26.3328887520947":1,"26.3414545210226":1,"26.3457644516974":1,"26.3521171323701":1,"26.3593239180025":1,"26.3616042077581":1,"26.3649646790442":1,"26.3678485207101":1,"26.3749884430473":1,"26.3793700357627":1,"26.4033966398831":1,"26.405325443787":1,"26.4096":1,"26.4142167377078":1,"26.4271350597119":1,"26.4320261057048":1,"26.4434137449559":1,"26.4457310588864":1,"26.4480663118975":1,"26.4548319550504":1,"26.4877488965368":1,"26.4879794672886":1,"26.4958345303074":1,"26.4970199249733":1,"26.4974692776615":1,"26.5150761128284":1,"26.5226007492735":1,"26.5249889434231":1,"26.5467128027682":1,"26.5538576738549":1,"26.5538757942078":1,"26.5570516128417":1,"26.5609657222648":1,"26.571961400706":1,"26.5771267605634":1,"26.5817657976295":1,"26.6004952331833":1,"26.6040964094426":1,"26.6112":1,"26.6468395593258":1,"26.6509619377163":1,"26.6517022260653":1,"26.6583149312043":1,"26.6588921282799":1,"26.6669402287821":1,"26.6689328899207":1,"26.681418717832":1,"26.6821207612186":1,"26.6849592413021":1,"26.6901027582477":1,"26.6905614522529":1,"26.7020912879964":1,"26.7074444730427":1,"26.7115600448934":1,"26.7291861704974":1,"26.7327043112208":1,"26.7336008830146":1,"26.7650362914249":1,"26.7710112282678":1,"26.7755126473592":1,"26.7767758208965":1,"26.7826168330498":1,"26.7865464214248":1,"26.789562997574":1,"26.8008984952264":1,"26.8122187110983":1,"26.8426560512168":1,"26.8567168106662":1,"26.8638267676883":1,"26.8646694214876":1,"26.8782518210198":1,"26.88":1,"26.8931920514096":1,"26.8970625":1,"26.8994509924367":1,"26.9222729851593":1,"26.923064240556":1,"26.9297061508783":1,"26.9448547272222":1,"26.9606648199446":1,"26.9695959641458":1,"26.9911549722569":1,"26.9962629757785":1,"27.0050610616558":1,"27.0170552272025":1,"27.0404846559072":1,"27.0429159318048":1,"27.0444111653942":1,"27.0578761247856":1,"27.0617102701126":1,"27.09536159731":1,"27.1115528473066":1,"27.1143721118154":1,"27.1202391210127":1,"27.1224176138922":1,"27.1257616329677":1,"27.1288347271682":1,"27.1300487281736":1,"27.132011146383":1,"27.1452656079462":1,"27.150862924023":1,"27.1511983264751":1,"27.1551613548259":1,"27.155767875323":1,"27.1612027231947":1,"27.1616766467066":1,"27.1649299317283":1,"27.1857309681159":1,"27.1863908591461":1,"27.1917499628419":1,"27.1932571724241":1,"27.2140387123825":1,"27.2257193237349":1,"27.2318188416316":1,"27.2394051193548":1,"27.2426395268747":1,"27.2507601706796":1,"27.2545484508089":1,"27.2734517128376":1,"27.2751996186739":1,"27.2790403180785":1,"27.2803449962785":1,"27.2898399448422":1,"27.3083691320325":1,"27.3097580515943":1,"27.317317947271":1,"27.3209940886452":1,"27.3250547845142":1,"27.3313716613852":1,"27.3423875908424":1,"27.3495925032813":1,"27.3690706655792":1,"27.3827860605506":1,"27.394379854852":1,"27.4004367297532":1,"27.4014076555384":1,"27.4076956531691":1,"27.410077777018":2,"27.411841538784":1,"27.4366148975906":1,"27.4369434070669":1,"27.4430220029439":1,"27.4440005881776":1,"27.4445797706806":1,"27.4455771428571":1,"27.4482893833938":1,"27.4523009598001":1,"27.4560360292738":1,"27.4623025257781":2,"27.4660808183654":1,"27.4715326180594":1,"27.4737682996212":1,"27.4768728809017":1,"27.4820979931969":1,"27.5140678617449":2,"27.5249366018597":1,"27.5268360080774":1,"27.5281620040273":1,"27.5297167736408":1,"27.5408219455492":1,"27.5414667270258":1,"27.5461810791042":1,"27.5501385041551":1,"27.5530020613131":1,"27.5626781347051":1,"27.5642956841392":1,"27.5653771687939":1,"27.5807690157669":1,"27.5813277592886":1,"27.5817693148688":1,"27.5873177803431":1,"27.5910767400357":1,"27.6124567474048":1,"27.6378618528992":2,"27.6411831935149":1,"27.6496109577253":1,"27.6585712691345":1,"27.6661334884397":1,"27.6676726273591":1,"27.6753194538611":1,"27.6826044212988":1,"27.6861845469244":1,"27.6927982427393":1,"27.7025605536332":1,"27.7084548104956":1,"27.7274784970575":1,"27.7329996031867":1,"27.7451969468426":1,"27.7457551072805":1,"27.7547494235425":1,"27.7585784854064":1,"27.7667293738242":1,"27.7680176118308":1,"27.7732480203424":1,"27.7733478450117":1,"27.7743777558249":1,"27.7918820004424":1,"27.8062283737024":1,"27.8078289852914":1,"27.8137504975575":1,"27.821790989146":1,"27.8278311240124":1,"27.8279606093763":1,"27.8497313482649":1,"27.8563230186944":1,"27.8588978418524":1,"27.8622388313232":1,"27.8623973627179":1,"27.8850922436025":1,"27.8898084761817":1,"27.8978928219383":1,"27.9053542455381":1,"27.9115723788514":1,"27.9124499035406":1,"27.9179242052847":1,"27.919084255958":1,"27.93600268391":1,"27.9364437432004":1,"27.9469774033729":1,"27.9568464462373":1,"27.9698106482513":1,"27.975865543781":1,"27.9820541579875":1,"28.0011904684035":1,"28.0072034988423":1,"28.0119988645297":1,"28.0172517649327":1,"28.0306523659839":1,"28.0486956521739":1,"28.0510886289675":1,"28.0566514776802":1,"28.0687847861665":1,"28.0692640428064":1,"28.0756806047309":1,"28.0825083466396":1,"28.0884671665489":2,"28.0942479371076":1,"28.0954322849051":1,"28.1006704152249":1,"28.1025105570278":1,"28.1107804348587":1,"28.1524538403956":1,"28.1551246537396":1,"28.1645369232912":1,"28.1782255227185":1,"28.1961855922179":1,"28.2026031768798":1,"28.2159321334723":1,"28.2163025779894":1,"28.2305082331787":1,"28.2306575700392":1,"28.2512215547813":1,"28.2627665533567":1,"28.2634718405289":1,"28.2852189393134":1,"28.2862607800808":1,"28.289860627408":1,"28.3017488109591":1,"28.3042946215256":1,"28.3191885038039":1,"28.3291646357954":1,"28.3396486672887":1,"28.3583302595137":1,"28.3843860200804":1,"28.3881494844917":1,"28.3968489031099":1,"28.4172541681981":1,"28.422773896239":1,"28.4283003617723":1,"28.4553841844505":1,"28.467913822666":1,"28.4842964193463":1,"28.489584648403":1,"28.5322359396434":1,"28.5334765649077":1,"28.5386389647764":1,"28.5614291766551":1,"28.5649352289084":1,"28.5873383837609":1,"28.5970355801213":1,"28.610418227984":1,"28.614117211015":1,"28.6175032577113":1,"28.6412294109947":1,"28.6755187318159":1,"28.6786939230705":1,"28.6830240687836":1,"28.6919576743315":1,"28.6941276274861":1,"28.6981061394381":1,"28.7007164471342":1,"28.7036921502814":1,"28.7113254302348":1,"28.7211863071834":1,"28.7213070934545":1,"28.7249146775189":1,"28.72566749733":1,"28.7407682871247":1,"28.745201089569":1,"28.7460523090928":1,"28.7650502563984":1,"28.7849625158512":1,"28.7925078043704":1,"28.79296875":1,"28.799542864399":1,"28.8123199063366":1,"28.8181930404929":1,"28.8224062685975":1,"28.8238016528926":1,"28.8415318058004":1,"28.8461494957112":1,"28.8475611540976":1,"28.8503631224879":1,"28.8518392307834":1,"28.8525725469532":1,"28.8700201130646":1,"28.8941633775822":1,"28.8941736028537":1,"28.8955410357423":1,"28.8996539792388":1,"28.9046060077882":1,"28.9100285531146":1,"28.9111141868512":1,"28.9215817874305":2,"28.9234086853064":1,"28.9264205439103":1,"28.9299741521923":1,"28.9379351876247":1,"28.9428781790223":1,"28.9446801135579":1,"28.9484157114505":1,"28.9828268938493":1,"28.9927620456467":1,"29.0021517279121":1,"29.0224021839315":1,"29.0233125":1,"29.0332322904665":1,"29.0438897487658":1,"29.0488792870645":1,"29.0565025574756":1,"29.0622396162101":1,"29.06227247775":1,"29.0648127382821":1,"29.0668200796304":1,"29.0824924809447":1,"29.1088664147622":1,"29.1119346969413":1,"29.1249086924763":1,"29.1266103130865":1,"29.1390825291904":1,"29.1394325109756":1,"29.1482660551608":1,"29.149552381824":1,"29.1574393143872":1,"29.1599251109467":1,"29.1671483420937":1,"29.1785476908636":1,"29.1826495447617":1,"29.1863135663664":1,"29.1884235221596":1,"29.2138630600169":1,"29.2156318564793":1,"29.2176679362881":1,"29.2193586398451":1,"29.2225062147684":1,"29.2338528450125":1,"29.2456215107111":1,"29.2657969562146":1,"29.2764965571165":1,"29.2788127426885":1,"29.2888520911878":1,"29.3163099085138":1,"29.3450327186199":1,"29.3674737770807":1,"29.383028703331":1,"29.395286568564":1,"29.4039606310835":1,"29.4247931127153":1,"29.4270535484265":1,"29.4277792786802":1,"29.4286740927057":1,"29.4308033715133":1,"29.431113568531":1,"29.4336260330579":1,"29.4364709216934":1,"29.4423401899656":1,"29.4526878995914":1,"29.4716162716548":1,"29.4777229294573":1,"29.4782464255966":1,"29.4828283282047":1,"29.4879012493353":1,"29.4906794072836":1,"29.5021664618767":1,"29.5141654908914":1,"29.5181863714634":1,"29.5189504373178":1,"29.5211097387949":1,"29.5247874758017":1,"29.5418299300459":1,"29.5576889606728":1,"29.5694746209319":1,"29.5697522816167":1,"29.5716545527859":1,"29.5740352938692":1,"29.5791637956866":1,"29.5854083378734":1,"29.5894126297872":1,"29.602636040753":1,"29.6074074074074":1,"29.6077504725898":1,"29.6169024671803":1,"29.6441525340653":1,"29.6532799586777":1,"29.6581799487091":1,"29.669161398486":1,"29.6711911548709":1,"29.6712802768166":1,"29.6787650122223":1,"29.6871170018457":1,"29.6936594848143":1,"29.6944701624442":1,"29.698960120444":1,"29.7102520580656":1,"29.7117257142857":1,"29.7283950617284":1,"29.758622973875":1,"29.7709714285714":2,"29.7994823330143":1,"29.8125":1,"29.8145065398335":1,"29.822574783212":1,"29.823986271393":1,"29.8378297956755":1,"29.8391361948798":1,"29.8416439212668":1,"29.864895217987":1,"29.8673409906323":1,"29.8781721228852":1,"29.8798763474505":1,"29.8815557672403":1,"29.9007174650069":1,"29.9212220679207":1,"29.950377001974":1,"29.954960706483":1,"29.9641579097654":1,"29.969112069752":1,"29.9724745992099":1,"29.9821534800714":1,"29.9997124481208":1,"30.0092141129497":1,"30.0241009790172":1,"30.0368983292105":1,"30.042015732723":1,"30.0490704091698":1,"30.0519199567334":1,"30.0532797849469":1,"30.0535714285714":1,"30.0679405179401":1,"30.0774049661719":1,"30.0844951870072":1,"30.1001539716155":1,"30.1031408426082":1,"30.1096159904722":1,"30.1134006123314":1,"30.1230860060783":1,"30.1312487312034":1,"30.1387651248718":1,"30.1443555363322":1,"30.1481334071305":1,"30.1502678040071":1,"30.1504901496824":1,"30.1513790274453":1,"30.1551265658235":1,"30.1714285714286":1,"30.1810630906868":1,"30.1857697033949":1,"30.1956108793193":1,"30.1977635101392":1,"30.2036207610373":1,"30.2142857142857":1,"30.2175505528488":1,"30.2178305723782":1,"30.2218659260194":1,"30.2420056330125":1,"30.2580778987865":1,"30.2597485714286":1,"30.2692577912346":1,"30.2744402828045":1,"30.2798919194206":1,"30.2844291092139":1,"30.2882856728117":1,"30.2934477969953":1,"30.303197351686":1,"30.3150451768552":1,"30.3322062552832":1,"30.3585722011898":1,"30.3733167496875":1,"30.3890321585223":1,"30.3980588924513":1,"30.4091428571429":1,"30.4118889855508":1,"30.417139280121":1,"30.4255266263018":1,"30.4264216599005":1,"30.431263729911":1,"30.4399524375743":1,"30.4510294335683":1,"30.4529934503656":1,"30.490005259055":1,"30.5089520189366":1,"30.5104236292382":1,"30.5137912385073":1,"30.5171949808505":1,"30.520161083612":1,"30.5297899816216":1,"30.5589179273543":1,"30.570252792475":1,"30.5792455211636":1,"30.5814603713101":1,"30.5912991357558":1,"30.6129588861784":1,"30.6152314895816":1,"30.6181774137383":1,"30.6612279196793":1,"30.6866446088292":1,"30.7024157755477":1,"30.7376628706269":1,"30.748175147929":1,"30.7623845842756":1,"30.7776650859351":1,"30.7886550252788":1,"30.801580882914":1,"30.8068344696875":1,"30.8110208508072":1,"30.8112967030997":1,"30.8231404958678":1,"30.8255839100346":1,"30.8275043559506":1,"30.830625":1,"30.8334473115693":1,"30.8414365161655":1,"30.851272294887":1,"30.8632580261593":1,"30.8706789061222":1,"30.8802157183501":1,"30.8819765957259":1,"30.91921875":1,"30.942767950052":1,"30.9558857142857":1,"30.9664361612414":1,"31.0018587892133":1,"31.0083984318838":1,"31.0237896190483":1,"31.0254820657234":1,"31.0279807509452":1,"31.0487576389966":1,"31.0720012044112":2,"31.0857142857143":1,"31.095041322314":1,"31.1162751154816":1,"31.1248646336402":1,"31.1275632306606":1,"31.1487982716716":1,"31.1684051920008":1,"31.2148101436872":1,"31.2164127423823":1,"31.2196511213955":2,"31.2575050450041":1,"31.2631089237016":1,"31.2652280815247":1,"31.271546635183":1,"31.2805042671063":1,"31.2913525228168":1,"31.3037032413617":1,"31.3076702168837":1,"31.3269861516035":1,"31.3306083707375":1,"31.3613238696345":1,"31.3662190082645":1,"31.3910034602076":1,"31.391687053116":1,"31.413451767097":1,"31.417990509358":1,"31.4279666639068":2,"31.454115762553":1,"31.4577583812736":1,"31.4782150765502":1,"31.4897460980905":1,"31.5104857228294":1,"31.5211176861528":1,"31.5359653866955":1,"31.539375":1,"31.5591238293649":1,"31.563965595292":1,"31.5904467911785":1,"31.6053413395155":1,"31.6203515549969":1,"31.6554154593155":1,"31.6580905912733":1,"31.6694464575529":1,"31.6706108883579":1,"31.6742823719198":1,"31.7038016528926":1,"31.7343566449996":1,"31.7348772706637":1,"31.7497048406139":1,"31.7562454019691":1,"31.7697910830065":1,"31.7736742972098":1,"31.7740918647854":1,"31.8092384301822":1,"31.8171428571429":1,"31.8347032079128":1,"31.8474264705882":1,"31.8583076327585":1,"31.8655749377002":1,"31.8727810650888":1,"31.8731588667177":1,"31.8766931477101":1,"31.8866448237078":1,"31.8935516570171":1,"31.9000566603557":1,"31.9047540346587":1,"31.9050269782245":1,"31.9067055393586":1,"31.9185047505671":1,"31.9262117760043":1,"31.9647803719826":1,"31.9656066481995":1,"31.9711802020518":1,"31.9793714934233":1,"31.9842846951541":1,"32.0041171392523":1,"32.0156847367905":1,"32.0201225201834":1,"32.0229038768706":1,"32.0282318225096":1,"32.0308863799601":1,"32.0542432544813":1,"32.0610591807794":1,"32.0930142809562":1,"32.0942171653579":1,"32.1167675329299":1,"32.1523668639053":1,"32.1530876446833":1,"32.1619670460336":1,"32.1645978891036":1,"32.1661486241681":1,"32.1762875510053":1,"32.2065568201121":1,"32.210302072528":1,"32.2148021808416":1,"32.2237700031814":1,"32.2267952906978":1,"32.227417184149":1,"32.23412904138":1,"32.2452098314987":1,"32.2471808449095":1,"32.2662724602796":1,"32.3241766166415":1,"32.3459137755843":1,"32.3559782608696":1,"32.3996606654727":1,"32.4069129729183":1,"32.4265875520768":1,"32.4514991181658":1,"32.453262476608":1,"32.4896885813149":1,"32.4920654296875":1,"32.5407270780032":1,"32.5413223140496":1,"32.5505215485756":1,"32.5574681648891":1,"32.5607814987048":1,"32.577479338843":1,"32.5861637452146":1,"32.5962475825712":1,"32.6071919347627":1,"32.6383706629122":1,"32.646320517902":1,"32.6568536358746":1,"32.6638134334876":1,"32.6649359627551":1,"32.68210489063":1,"32.6880543845502":1,"32.6974216672448":1,"32.7062970677776":1,"32.7306053829111":1,"32.7313019390582":1,"32.8023497917906":1,"32.8047337278106":1,"32.8120032097382":1,"32.8272814369738":1,"32.8395332445767":1,"32.8487697600048":1,"32.8537992245835":1,"32.8961361314509":1,"32.934721122718":1,"32.9450157174064":1,"32.9628962808322":1,"32.9651162790698":1,"32.9770599340211":1,"32.9856855576063":1,"33.0156924741907":1,"33.0159839287274":1,"33.0211585154353":1,"33.0405827263267":1,"33.0419448894904":1,"33.0431615370606":1,"33.0621498444271":1,"33.0643900902209":1,"33.0804124298825":1,"33.0835966676242":1,"33.0866598925824":1,"33.101128654881":1,"33.1187549211865":1,"33.1207045805262":1,"33.1294282413081":1,"33.1923821362773":1,"33.1985009108491":1,"33.235083931162":1,"33.2535450621579":1,"33.2713046409168":1,"33.2735152474848":1,"33.2811043815631":1,"33.2889939922873":1,"33.326612997027":1,"33.3323158633741":1,"33.3429115573524":1,"33.3915069302309":1,"33.4079097815021":1,"33.415880389026":1,"33.4262740461261":1,"33.4332127241071":1,"33.4388239970453":1,"33.4693420125663":1,"33.4710110514276":1,"33.4841941494092":1,"33.5719717744946":1,"33.584487534626":1,"33.6265420871392":1,"33.6657901451685":1,"33.697064013332":1,"33.698725444915":1,"33.7185742713264":1,"33.7846615955397":1,"33.7965069700369":1,"33.8103298499351":1,"33.8288391994789":1,"33.8393280072003":1,"33.8818583319178":1,"33.9009473889155":1,"33.9578113163569":1,"33.9799326800242":1,"33.9844527906367":1,"34.0487983960793":1,"34.0578572765305":1,"34.072145671661":1,"34.0907754141751":1,"34.091457945544":1,"34.0977128091937":1,"34.1155111298977":1,"34.1479347038063":1,"34.1482646939433":1,"34.157570276256":1,"34.1732048280166":1,"34.1848773981738":1,"34.1924789316651":1,"34.1968100188254":1,"34.2222222222222":1,"34.2662855547589":1,"34.2900714144019":1,"34.3046812086412":1,"34.3216850502721":1,"34.3548673560004":1,"34.374375":1,"34.4034879112168":1,"34.4124305245649":1,"34.4173832848157":1,"34.4465162577369":1,"34.4470297457":1,"34.5044697419126":1,"34.5244704163623":1,"34.5279118484358":1,"34.5796362934666":1,"34.5861813674007":1,"34.602381100689":1,"34.6083175803403":1,"34.6305464279669":1,"34.6365497366431":1,"34.6464636274678":1,"34.6512624203646":1,"34.6572321126124":1,"34.6985707818664":2,"34.7001093865839":1,"34.707933885214":1,"34.7377102083259":1,"34.7518624270422":1,"34.754724372106":1,"34.758517007168":1,"34.7792387543253":1,"34.7811351143167":1,"34.8059808526659":1,"34.8239370350131":1,"34.854048908193":1,"34.878892733564":1,"34.9007561436673":1,"34.9125520523498":1,"34.9256522685549":1,"34.9503923900119":1,"34.9934909944863":1,"35.0499995408092":1,"35.0695669214188":1,"35.0736963651536":1,"35.0811238622873":1,"35.1268048377644":1,"35.1314429974244":1,"35.141422958594":1,"35.147464026597":1,"35.1742870076958":1,"35.192943115961":1,"35.1993226635756":1,"35.2545176963866":1,"35.271781007546":1,"35.2730179746314":2,"35.299351040638":1,"35.3031677607248":1,"35.3327297419647":1,"35.3734752829977":1,"35.3973121343256":1,"35.4201288258615":1,"35.5446710893422":1,"35.5676807817616":1,"35.5989446212312":1,"35.6205714285714":1,"35.6526948400095":1,"35.654317905184":1,"35.6852059976426":1,"35.7193077339102":1,"35.7640183508985":1,"35.7657691289208":1,"35.7677428886422":1,"35.7966579622268":1,"35.8275013101581":1,"35.8646971870279":1,"35.8721639916471":1,"35.8793081681606":1,"35.8855623528065":1,"35.9113022119193":1,"35.9196968146519":1,"35.9237187461554":1,"35.9284890426759":1,"35.9557634387026":1,"35.977798819503":1,"36.0080773727282":1,"36.0138929076633":1,"36.0575627232093":1,"36.0632854194033":1,"36.0638630908901":1,"36.0677481889603":1,"36.0789011893177":1,"36.1547107438017":1,"36.1553050775837":1,"36.1607142857143":1,"36.1649312786339":1,"36.1884614005522":1,"36.2027208707169":1,"36.2072042941215":1,"36.2092559527688":1,"36.2449162167135":1,"36.2475056470094":1,"36.2596668649613":1,"36.3025071071464":1,"36.3263123622783":1,"36.3403300753084":1,"36.3461538461538":1,"36.3748302399276":1,"36.3768326317318":1,"36.4046280991736":1,"36.41203125":1,"36.4142730685877":1,"36.420395421436":1,"36.4365849596512":1,"36.4849425472665":1,"36.5346227553768":1,"36.5735889819066":1,"36.5990087713694":1,"36.6197917345463":1,"36.621335534106":1,"36.7645429362881":1,"36.7660557724993":1,"36.7696633386031":1,"36.8108780725325":1,"36.8435126213897":1,"36.8516683788556":1,"36.857444365234":1,"36.8856332703214":1,"36.9073691705233":1,"36.9081278682403":1,"36.970022984009":1,"36.9908256880734":1,"37.0110721036997":1,"37.0221436687287":1,"37.0273215515007":1,"37.0307963467393":1,"37.1050767414404":1,"37.1053155717615":1,"37.1122400756144":1,"37.1400855775926":1,"37.1406973530878":1,"37.1461746367832":1,"37.1651236262563":1,"37.1754282069971":1,"37.1803801876876":1,"37.181298457201":1,"37.190069669453":1,"37.209375":1,"37.2345846781043":1,"37.2367567323588":1,"37.2406135865595":1,"37.2781065088757":1,"37.2929400368768":1,"37.3124208684709":1,"37.3142455968988":1,"37.3364541206788":1,"37.352793858985":1,"37.3568096068806":1,"37.3626373626374":1,"37.3949015241678":1,"37.4009901422042":1,"37.422":1,"37.4485552254928":1,"37.4742823251914":1,"37.5424215483318":1,"37.5434025441293":1,"37.5792849282677":1,"37.6107487442316":1,"37.6328451458477":1,"37.6466235806213":1,"37.6875":1,"37.7207039216829":1,"37.7248569921701":1,"37.7263288633585":1,"37.7763309515183":1,"37.7966448630466":1,"37.804763705104":1,"37.8413138108429":1,"37.8942735586092":1,"37.8962314891176":2,"37.9005495923888":1,"37.9088806848148":1,"37.9423955787013":1,"37.957202268431":1,"37.9756449286973":1,"37.9785137924564":1,"38.0190390683045":1,"38.0374214876033":1,"38.0390796623887":1,"38.1078442630258":1,"38.1163447521866":1,"38.200948086484":1,"38.2419886753774":1,"38.2682705497682":1,"38.3952394721111":1,"38.4052618738073":1,"38.4145179584121":1,"38.5206454230517":1,"38.5427791622167":1,"38.5432098765432":1,"38.5542762327221":1,"38.5860940289625":1,"38.6006037638236":1,"38.7151310228233":1,"38.7215943876911":1,"38.8426476416964":1,"38.8895311227916":1,"38.894048566272":1,"38.9144172562126":1,"38.9201498480132":1,"38.9318473888912":1,"38.9692644710816":1,"38.98125":1,"39.0674420977451":1,"39.131392434803":1,"39.1819896727854":1,"39.1967006144264":1,"39.3014290871629":1,"39.3139586740003":1,"39.3856373827311":1,"39.4259789359978":1,"39.43868040898":1,"39.4440047487139":1,"39.5468349648114":1,"39.582842397964":1,"39.6126869762707":1,"39.6496420336321":1,"39.7111199050257":1,"39.8212166359435":1,"39.8358460622892":1,"39.8364851782375":1,"39.9611105997319":1,"39.9915217916225":1,"40.0652388604821":1,"40.1386115502552":1,"40.2755269686726":1,"40.292269698654":1,"40.2958304261947":1,"40.3447662458702":1,"40.3486299844063":1,"40.3702385190459":1,"40.4444444444444":1,"40.4902789518174":1,"40.5795243420299":1,"40.5805104778396":1,"40.6043556920041":1,"40.7074043684925":1,"40.7263313609467":1,"40.7412887846119":1,"40.743771411528":1,"40.7673375863133":1,"40.7795805302731":1,"40.8961776910906":1,"40.902730704411":1,"40.9662023526759":1,"41.0939594532967":1,"41.1153474872346":1,"41.2553404518628":1,"41.3198016266614":1,"41.3839285714286":1,"41.3980530016225":1,"41.4123456790123":1,"41.4548404542996":1,"41.4862433663292":1,"41.6184286155703":1,"41.6632563605486":1,"41.6704391127207":1,"41.7794274487674":1,"41.9964094172451":1,"42.1233267472256":1,"42.2143437371167":1,"42.2150343609629":1,"42.2604644921355":1,"42.2817597627286":1,"42.2880135505519":1,"42.3133675398326":1,"42.3364845377343":1,"42.3383476501766":1,"42.3465689978457":1,"42.3690381097168":1,"42.4840592013091":1,"42.6673833439715":1,"42.7163594135578":1,"42.7525936251776":1,"42.8602645533477":1,"42.9418615067634":1,"42.985577589215":1,"43.0260474773519":1,"43.2702011115778":1,"43.2942708333333":1,"43.421506631311":1,"43.4287618254299":1,"43.4387477856699":1,"43.4732142857143":1,"43.4847258629053":1,"43.5450667073312":1,"43.6344112481963":1,"43.686265369151":1,"43.6972096578987":1,"43.7028571428571":1,"43.7347841807131":1,"43.7663730325313":1,"43.8173930293334":1,"43.8606893928376":1,"43.944857803562":1,"44.4457947072864":1,"44.6315411171839":1,"44.6932854895181":1,"44.7404803506994":1,"44.9994218984854":1,"45.0197423807058":1,"45.0778799351001":1,"45.3443044982699":1,"45.4650671967974":1,"45.5314285714286":1,"45.55562336294":1,"45.6692336826158":1,"45.784498358724":1,"45.8891869683312":1,"45.9705175452652":1,"46.1044490603525":1,"46.1649452306804":1,"46.651990242161":1,"46.7198710390733":1,"47.0270951549098":1,"47.0354930861179":1,"47.3092570942714":1,"47.6027889884353":1,"47.7484988019163":1,"47.8082866696511":1,"47.8461600876303":1,"47.9481218501545":1,"48.3499986596252":1,"48.3869419260691":1,"48.389296340893":1,"48.4234430954669":1,"48.6149704290733":1,"48.6185966132046":1,"49.0242214532872":1,"49.0997043805429":1,"49.4755432396304":1,"49.7610898869367":1,"49.8823469814212":1,"49.9886826618379":1,"50.0651591347284":1,"50.4102874327316":1,"50.4231938856102":1,"51.5002963230179":1,"52.3190929165959":1,"52.4592228126422":1,"53.4549442403578":1,"56.2604416685664":1}}
	// I want to just test real quick.

	@Test
	public void tempTest() throws JsonProcessingException {
		String data = "{\n" +
				"    \"categoricalData\": [],\n" +
				"    \"continuousData\": [\n" +
				"        {\n" +
				"            \"title\": \"Variable distribution of phv00087080: bmifc\",\n" +
				"            \"continuous\": false,\n" +
				"            \"colors\": null,\n" +
				"            \"chartWidth\": 500,\n" +
				"            \"chartHeight\": 600,\n" +
				"            \"continuousMap\": {\n" +
				"                \"16.7 - 17.7\": 10,\n" +
				"                \"18.7 - 19.7\": 29,\n" +
				"                \"20.7 - 21.7\": 68,\n" +
				"                \"22.7 - 23.7\": 147,\n" +
				"                \"24.7 - 25.7\": 236,\n" +
				"                \"26.7 - 27.7\": 245,\n" +
				"                \"28.7 - 29.7\": 241,\n" +
				"                \"30.7 - 31.7\": 162,\n" +
				"                \"32.7 - 33.7\": 110,\n" +
				"                \"34.7 - 35.7\": 98,\n" +
				"                \"36.7 - 37.7\": 84,\n" +
				"                \"38.7 - 39.7\": 43,\n" +
				"                \"40.7 - 41.7\": 36,\n" +
				"                \"42.7 - 43.7\": 25,\n" +
				"                \"44.7 - 45.7\": 16,\n" +
				"                \"46.7 - 47.7\": 15,\n" +
				"                \"48.7 - 49.7\": 9,\n" +
				"                \"50.7 - 51.7\": 3,\n" +
				"                \"52.7 - 53.7\": 1,\n" +
				"                \"54.7 +\": 1\n" +
				"            },\n" +
				"            \"obfuscated\": false,\n" +
				"            \"xaxisName\": \"bmifc\",\n" +
				"            \"yaxisName\": \"Number of Participants\"\n" +
				"        }\n" +
				"    ]\n" +
				"}";

		Map<String, Object> stringObjectMap = mapper.readValue(data, new TypeReference<Map<String, Object>>() {});
		Map<String, Object> stringObjectMap1 = mapper.convertValue(stringObjectMap.get("continuousData"), new TypeReference<Map<String, Object>>() {});

	}

}